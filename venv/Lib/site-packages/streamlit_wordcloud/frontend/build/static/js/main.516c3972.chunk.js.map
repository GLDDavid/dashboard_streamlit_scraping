{"version":3,"sources":["WordcloudComponent.js","index.js"],"names":["initialSettings","width","height","fontScale","fontMin","fontMax","padding","enableTooltip","spiral","scale","tooltipOptions","allowHTML","placement","arrow","theme","hideOnClick","colors","viridis","withStreamlitConnection","props","useState","clicked","hovered","state","setState","args","parseInt","mode","undefined","tooltipDataFields","words","maxWords","length","perWordColoring","options","fontFamily","fontSizes","rotations","rotationAngles","transitionDuration","deterministic","enableOptimizations","onWordHovered","word","callbacks","getWordColor","color","onWordClick","onWordClicked","onWordMouseOver","onWordMouseOut","getWordTooltip","innerHTML","property","formatTooltipLayout","useEffect","Streamlit","setComponentValue","setFrameHeight","style","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAOMA,G,kBAAkB,CACtBC,MAAO,OACPC,OAAQ,OACRC,UAAW,EACXC,QAAS,EACTC,QAAS,GACTC,QAAS,EACTC,eAAe,EACfC,OAAQ,cACRC,MAAO,SACPC,eAAgB,CACdC,WAAW,EACXC,UAAW,OACXC,OAAO,EACPC,MAAO,QACPC,aAAa,GAEfC,OAAQ,CACNC,QAAS,CACP,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,cA0GSC,eArGY,SAACC,GAAW,IAAD,EACVC,mBAAS,CAAEC,QAAS,KAAMC,QAAS,OADzB,mBAC7BC,EAD6B,KACtBC,EADsB,KAE9BvB,EAAQkB,EAAMM,KAAN,OAAuBzB,EAAgBC,MAC/CC,EAASiB,EAAMM,KAAN,QAAwBzB,EAAgBE,OACjDC,EAAYgB,EAAMM,KAAN,WAA2BzB,EAAgBG,UACvDC,EAAUsB,SAASP,EAAMM,KAAN,SACnBpB,EAAUqB,SAASP,EAAMM,KAAN,SACnBnB,EAAUoB,SAASP,EAAMM,KAAN,UAA0BzB,EAAgBM,QAC7DqB,EAAOR,EAAMM,KAAN,QAAwBzB,EAAgBQ,OAC/CC,EAAQU,EAAMM,KAAN,SAAyBzB,EAAgBS,MACjDF,OAC4BqB,IAAhCT,EAAMM,KAAN,cACIzB,EAAgBO,cAChBY,EAAMM,KAAN,cACAf,EACJS,EAAMM,KAAN,gBAAgCzB,EAAgBU,eAC5CmB,EAAoBV,EAAMM,KAAN,kBACpBK,EAAQX,EAAMM,KAAN,OAAqB,GAC7BM,EAAWZ,EAAMM,KAAN,UAA0BK,EAAME,OAC3ChB,EACJG,EAAMM,KAAN,eAA+BzB,EAAgBgB,OAAhB,QAC3BiB,EAAkBd,EAAMM,KAAN,gBAElBS,EAAU,CACdlB,OAAQA,EACRmB,WAAY,SACZC,UACEhC,GAAWC,EACP,CAACD,EAASC,GACV,CACEqB,SAAS1B,EAAgBI,QAAUD,GACnCuB,SAAS1B,EAAgBK,QAAUF,IAE3CG,QAASA,EACT+B,UAAW,EACXC,eAAgB,EAAE,GAAI,IACtB9B,OAAQmB,EACRlB,MAAOA,EACP8B,mBAAoB,IAEpBC,eAAe,EACfC,qBAAqB,EACrBlC,cAAeA,EACfG,eAAgBA,GAWZgC,EAAgB,SAACC,GACrBnB,GAAS,SAACD,GACR,MAAO,CACLF,QAASE,EAAMF,QACfC,QAASqB,OAaTC,EAAY,CAChBC,aAAcZ,EAVK,SAACU,GAAD,OAAUA,EAAKG,YAUUlB,EAC5CmB,YAAa,SAACJ,GAAD,OA3BO,SAACA,GACrBnB,GAAS,SAACD,GACR,MAAO,CACLF,QAASsB,EACTrB,QAASC,EAAMD,YAuBI0B,CAAcL,IACrCM,gBAAiB,SAACN,GAAD,OAAUD,EAAcC,IACzCO,eAAgB,SAACP,GAAD,OAAUD,EAAc,OACxCS,eAAgB,SAACR,GAAD,OAbU,SAACA,GAC3B,IAAIS,EAAY,GAChB,IAAK,IAAMC,KAAYxB,EACrBuB,GAAS,mBAAgBvB,EAAkBwB,GAAlC,iBAAoDV,EAAKU,GAAzD,gBAEX,OAAOD,EAQmBE,CAAoBX,KAWhD,OAPAY,qBAAU,WACRC,IAAUC,kBAAkBlC,KAC3B,CAACA,IACJgC,qBAAU,WACRC,IAAUE,oBAIV,6BACE,yBAAKC,MAAO,CAAE1D,MAAOA,EAAOC,OAAQA,IAClC,kBAAC,IAAD,CACE4B,MAAOA,EACPI,QAASA,EACTH,SAAUA,EACVa,UAAWA,SClIrBgB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.516c3972.chunk.js","sourcesContent":["import { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\"\nimport React, { useState, useEffect } from \"react\"\nimport ReactWordCloud from \"react-wordcloud\"\nimport \"tippy.js/dist/tippy.css\"\nimport \"tippy.js/animations/scale.css\"\nimport \"tippy.js/themes/light.css\"\n\nconst initialSettings = {\n  width: \"100%\",\n  height: \"100%\",\n  fontScale: 1.0,\n  fontMin: 8,\n  fontMax: 72,\n  padding: 1,\n  enableTooltip: true,\n  spiral: \"rectangular\",\n  scale: \"linear\",\n  tooltipOptions: {\n    allowHTML: true,\n    placement: \"left\",\n    arrow: true,\n    theme: \"light\",\n    hideOnClick: true,\n  },\n  colors: {\n    viridis: [\n      \"#fde725\",\n      \"#b5de2b\",\n      \"#6ece58\",\n      \"#35b779\",\n      \"#1f9e89\",\n      \"#26828e\",\n      \"#31688e\",\n      \"#3e4989\",\n      \"#482878\",\n      \"#440154\",\n    ],\n  },\n}\n\nconst WordcloudComponent = (props) => {\n  const [state, setState] = useState({ clicked: null, hovered: null })\n  const width = props.args[\"width\"] || initialSettings.width\n  const height = props.args[\"height\"] || initialSettings.height\n  const fontScale = props.args[\"fontScale\"] || initialSettings.fontScale\n  const fontMin = parseInt(props.args[\"fontMin\"])\n  const fontMax = parseInt(props.args[\"fontMax\"])\n  const padding = parseInt(props.args[\"padding\"]) || initialSettings.padding\n  const mode = props.args[\"layout\"] || initialSettings.spiral\n  const scale = props.args[\"scaling\"] || initialSettings.scale\n  const enableTooltip =\n    props.args[\"enableTooltip\"] === undefined\n      ? initialSettings.enableTooltip\n      : props.args[\"enableTooltip\"]\n  const tooltipOptions =\n    props.args[\"tooltipOptions\"] || initialSettings.tooltipOptions\n  const tooltipDataFields = props.args[\"tooltipDataFields\"];\n  const words = props.args['words']||[];\n  const maxWords = props.args[\"maxWords\"] || words.length\n  const colors =\n    props.args[\"paletteColors\"] || initialSettings.colors[\"viridis\"]\n  const perWordColoring = props.args[\"perWordColoring\"];\n  // Initialize Options\n  const options = {\n    colors: colors,\n    fontFamily: \"roboto\",\n    fontSizes:\n      fontMin && fontMax\n        ? [fontMin, fontMax]\n        : [\n            parseInt(initialSettings.fontMin * fontScale),\n            parseInt(initialSettings.fontMax * fontScale),\n          ],\n    padding: padding,\n    rotations: 3,\n    rotationAngles: [-90, 90],\n    spiral: mode,\n    scale: scale,\n    transitionDuration: 500,\n    // Non-configurable\n    deterministic: true,\n    enableOptimizations: true,\n    enableTooltip: enableTooltip,\n    tooltipOptions: tooltipOptions,\n  }\n  // Callback Handlers\n  const onWordClicked = (word) => {\n    setState((state) => {\n      return {\n        clicked: word,\n        hovered: state.hovered,\n      }\n    });\n  }\n  const onWordHovered = (word) => {\n    setState((state) => {\n      return {\n        clicked: state.clicked,\n        hovered: word,\n      }\n    })\n  }\n  const getWordColor = (word) => word.color;\n  const formatTooltipLayout = (word) => {\n    let innerHTML = \"\";\n    for (const property in tooltipDataFields) {\n      innerHTML += `<span><b>${tooltipDataFields[property]}</b>: ${word[property]}</span></br>`\n    }\n    return innerHTML\n  }\n\n  const callbacks = {\n    getWordColor: perWordColoring? getWordColor:undefined,\n    onWordClick: (word) => onWordClicked(word),\n    onWordMouseOver: (word) => onWordHovered(word),\n    onWordMouseOut: (word) => onWordHovered(null),\n    getWordTooltip: (word) => formatTooltipLayout(word),\n\n  }\n  // Return state to Streamlit\n  useEffect(() => {\n    Streamlit.setComponentValue(state);\n  }, [state])\n  useEffect(() => {\n    Streamlit.setFrameHeight()\n  })\n\n  return (\n    <div>\n      <div style={{ width: width, height: height }}>\n        <ReactWordCloud\n          words={words}\n          options={options}\n          maxWords={maxWords}\n          callbacks={callbacks}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default withStreamlitConnection(WordcloudComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport WordcloudComponent from \"./WordcloudComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <WordcloudComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}